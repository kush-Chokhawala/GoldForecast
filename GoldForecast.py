# -*- coding: utf-8 -*-
"""gold_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2YZ-0vvUa_7_eKMZEt7PuNrSOXBTeKj
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data collection and processing"""

#Loading Data
gold_data = pd.read_csv('/content/drive/MyDrive/Kush_Modi Personal/Personal Projects/Supervised ML/Gold Price Prediction/gld_price_data.csv')

#Print first 9 rows in thr dataframe
gold_data.head()

#Print last 5 rows of the dataframe
gold_data.tail()

#no. of rows and colums
gold_data.shape

#Getting some basic info. about the data
gold_data.info()

#Checking no. of missing value
gold_data.isnull().sum()

#Getting statistical measures of the data
gold_data.describe()

gold_data.describe

"""Find the correlation in data
  1. Positive
  2. Nagative
"""

correlation = gold_data.corr()

#Constructing the heat map to understand the correlation
plt.figure(figsize=(8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

#correlation values of gold
print(correlation['GLD'])

#Check the distribution of the gold price
sns.distplot(gold_data['GLD'], color='green')

"""Seperate gold column::Splitting the Feature and Target"""

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

"""Splitting into Training data and Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 2)

"""Model Training:Random Forest Regression"""

regressor = RandomForestRegressor(n_estimators = 100)

#Train the model
regressor.fit(X_train, Y_train)
regressor

"""Model Evaluation"""

#Perdiction on Test data
test_data_prediction = regressor.predict(X_test)

print(test_data_prediction)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error : ", error_score)

"""Compare the actual values and predicted valuues"""

#convert Y_test into list
Y_test = list(Y_test)

plt.plot(test_data_prediction, color='red', label='Predicted Value')
plt.plot(Y_test, color='blue', label='Actual Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('No. of values')
plt.ylabel('Gold Price')
plt.legend()
plt.show()

# Residual plot
residuals = Y_test - test_data_prediction
sns.scatterplot(x=Y_test, y=residuals, color='orange')
plt.xlabel('Actual Gold Price (GLD)')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.axhline(y=0, color='red', linestyle='--')
plt.show()

# Feature importance plot
feature_importance = regressor.feature_importances_
plt.bar(X.columns, feature_importance)
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature Importance Plot')
plt.xticks(rotation=45)
plt.show()

# Scatter plots between features and target variable (GLD)
for feature in X.columns:
    plt.scatter(X[feature], Y, color='blue', alpha=0.5)
    plt.xlabel(feature)
    plt.ylabel('Gold Price (GLD)')
    plt.title(f'Scatter plot between {feature} and GLD')
    plt.show()

